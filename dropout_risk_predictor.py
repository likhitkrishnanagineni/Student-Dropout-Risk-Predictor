# -*- coding: utf-8 -*-
"""Dropout Risk Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TcZjnlbrMBq1h4l6wKsGb3muIBi40mUl
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

df = pd.read_csv("student_data.csv")

# Prepare the data
df['dropout_risk'] = np.where((df['G1'] < 10) | (df['G2'] < 10) | (df['G3'] < 10), 1, 0)

# Select relevant features
features = ['G1', 'G2', 'G3', 'studytime', 'failures', 'absences']

X = df[features]
y = df['dropout_risk']

# Encode categorical variables
X_encoded = pd.get_dummies(X, drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train a Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Create a function to take user input
def get_user_input():
    g1 = float(input("Enter First Subject Grade (G1): "))
    g2 = float(input("Enter Second Subject Grade (G2): "))
    g3 = float(input("Enter Third Grade (G3): "))
    studytime = int(input("Enter Weekly Study Time (1 to 4): "))
    failures = int(input("Enter Number of Past Class Failures (0 to 3): "))
    absences = int(input("Enter Number of School Absences: "))

    # Create a DataFrame with user input
    user_data = pd.DataFrame({
        'G1': [g1],
        'G2': [g2],
        'G3': [g3],
        'studytime': [studytime],
        'failures': [failures],
        'absences': [absences]
    })

    return user_data

# Get user input
user_input_data = get_user_input()

# Standardize the user input features
user_input_data = scaler.transform(user_input_data)

# Predict dropout risk for the user input
dropout_risk_prediction = clf.predict(user_input_data)

# Display prediction result
if dropout_risk_prediction[0] == 1:
    print("The student is at high risk of dropping out.")
else:
    print("The student is at low risk of dropping out.")